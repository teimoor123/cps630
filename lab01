<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Battleship Game</title>
    <style>
        #gameContainer {
            position: relative;
            width: 300px;
            height: 300px;
        }
        canvas {
            position: absolute;
            top: 0;
            left: 0;
            border: 1px solid black;
        }
    </style>
</head>
<body>
<div id="gameContainer">
    <canvas id="gridCanvas" width="300" height="300"></canvas>
    <canvas id="shipCanvas" width="300" height="420"></canvas>
</div>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const gridCanvas = document.getElementById('gridCanvas');
    const ctxGrid = gridCanvas.getContext('2d');
    const shipCanvas = document.getElementById('shipCanvas');
    const ctxShip = shipCanvas.getContext('2d');
    const gridSize = 10;
    const cellSize = gridCanvas.width / gridSize;
    let dragging = false;
    let dragOffsetX = 0;
    let dragOffsetY = 0;
    let shipPosition = { x: 30, y: 315 }; 
    const shipSize = { width: cellSize, height: cellSize * 3 }; 
    let ships = [[5, 5], [6, 6], [7, 7]]; // Ship placement
    let hits = [];

    function drawGrid() {
        ctxGrid.clearRect(0, 0, gridCanvas.width, gridCanvas.height);
        for (let i = 0; i < gridSize; i++) {
            for (let j = 0; j < gridSize; j++) {
                ctxGrid.strokeRect(i * cellSize, j * cellSize, cellSize, cellSize);
            }
        }
    }
    
    function drawShip() {
        ctxShip.clearRect(0, 0, shipCanvas.width, shipCanvas.height);
        ctxShip.fillStyle = 'blue';
        ctxShip.fillRect(shipPosition.x, shipPosition.y, shipSize.width, shipSize.height);
    }
    
    function handleCanvasClick(event) {
        const rect = gridCanvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        const gridX = Math.floor(x / cellSize);
        const gridY = Math.floor(y / cellSize);

        if (!hits.some(hit => hit[0] === gridX && hit[1] === gridY)) {
          if (ships.some(ship => ship[0] === gridX && ship[1] === gridY)) {
            ctxGrid.fillStyle = 'red';
            ctxGrid.fillRect(gridX * cellSize, gridY * cellSize, cellSize, cellSize);
            hits.push([gridX, gridY]);
          } else {
            ctxGrid.fillStyle = 'blue';
            ctxGrid.fillRect(gridX * cellSize, gridY * cellSize, cellSize, cellSize);
            hits.push([gridX, gridY]);
          }
        }
      }

    shipCanvas.addEventListener('mousedown', function(event) {
        let rect = shipCanvas.getBoundingClientRect();
        let x = event.clientX - rect.left;
        let y = event.clientY - rect.top;
        if (x >= shipPosition.x && x <= shipPosition.x + shipSize.width &&
            y >= shipPosition.y && y <= shipPosition.y + shipSize.height) {
            dragging = true;
            dragOffsetX = x - shipPosition.x;
            dragOffsetY = y - shipPosition.y;
        }
    });

    window.addEventListener('mousemove', function(event) {
        if (dragging) {
            let rect = shipCanvas.getBoundingClientRect();
            shipPosition.x = event.clientX - rect.left - dragOffsetX;
            shipPosition.y = event.clientY - rect.top - dragOffsetY;
            drawShip();
        }
    });

    window.addEventListener('mouseup', function() {
        if (dragging) {
        dragging = false;
        let snappedX = Math.round(shipPosition.x / cellSize) * cellSize;
        let snappedY = Math.round(shipPosition.y / cellSize) * cellSize;

        if (event.clientY < 300) {
            shipPosition.x = snappedX;
            shipPosition.y = snappedY;
        } else {
            shipPosition.x = snappedX;
            shipPosition.y = 210;
        }

        drawShip();
    }
    });

    function initGame() {
        drawGrid();
        drawShip();
        gridCanvas.addEventListener('click', handleCanvasClick);
    }

    initGame();
});
</script>
</body>
</html>
