<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Battleship Game</title>
  <style>
    #gameContainer {
      position: relative;
      width: 300px;
      height: 900px;
    }
    #gridCanvas1, #gridCanvas2 {
      border: 2px solid black;
    }
    h1 {
      text-align: center;
    }
    #winnerMessage {
      font-size: 60px;
    }
  </style>
</head>
<body style="background-color:#ADD8E6">
<h1 style="font-family:fantasy">Battleship</h1>
<div id="gameContainer">
  <h2 style="font-family:fantasy">Player 1 Grid</h2>
  <canvas id="gridCanvas1" width="300" height="400"></canvas>
  <h2 style="font-family:fantasy"> Computer Grid</h2>
  <canvas id="gridCanvas2" width="300" height="300"></canvas>
  <div id="hoverMessage">Good Luck!</div>
  <div id="userRecord">Player 1 - Hits: 0, Misses: 0</div>
  <div id="computerRecord">Computer - Hits: 0, Misses: 0</div>
  <div id="winnerMessage"></div>
  <button id="newGameButton" style="display: none;">New Game</button>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const canvas = document.getElementById('gridCanvas1');
    const ctxGrid1 = canvas.getContext('2d');
    const gridCanvas2 = document.getElementById('gridCanvas2');
    const ctxGrid2 = gridCanvas2.getContext('2d');
    const gridSize = 10;
    const spotSize = canvas.width / gridSize;
    let dragging = false;
    let dragOffsetX = 0;
    let dragOffsetY = 0;
    let userTurn = true;

    let ships = [
      { ogX: 30, ogY: 305, x: 30, y: 305, width: 30, height: 30, dragging: false, placed: false, size: 1, timesHit: 0 },
      { ogX: 90, ogY: 305, x: 90, y: 305, width: 30, height: 60, dragging: false, placed: false, size: 2, timesHit: 0 },
      { ogX: 150, ogY: 305, x: 150, y: 305, width: 30, height: 90, dragging: false, placed: false, size: 3, timesHit: 0 }
    ];
    let enemyShips = [[3, 7], [1, 1], [2, 1], [5, 5], [5, 6], [5, 7]];
    let hits = [];
    let enemyHits = [];
    let userHitCount = 0;
    let userMissCount = 0;
    let computerHitCount = 0;
    let computerMissCount = 0;
    let gameOver = false;

    function drawGrid() {
      ctxGrid1.clearRect(0, 0, canvas.width, canvas.height); 
      for (let i = 0; i < gridSize; i++) {
        for (let j = 0; j < gridSize; j++) {
          ctxGrid1.strokeRect(i * spotSize, j * spotSize, spotSize, spotSize);
        }
      }
      ctxGrid2.clearRect(0, 0, canvas.width, canvas.height); 
      for (let i = 0; i < gridSize; i++) {
        for (let j = 0; j < gridSize; j++) {
          ctxGrid2.strokeRect(i * spotSize, j * spotSize, spotSize, spotSize);
        }
      }
    }

    function drawShips() {
      ships.forEach(ship => {
        ctxGrid1.fillStyle = 'blue';
        ctxGrid1.fillRect(ship.x, ship.y, ship.width, ship.height);
      });
    }

    function drawGame() {
      drawGrid(); 
      drawShips();
    }

    canvas.addEventListener('mousedown', function(event) {
      const rect = canvas.getBoundingClientRect();
      const mouseX = event.clientX - rect.left;
      const mouseY = event.clientY - rect.top;

      ships.forEach((ship, index) => {
        if (!ship.placed && mouseX > ship.x && mouseX < ship.x + ship.width && mouseY > ship.y && mouseY < ship.y + ship.height) {
          dragging = true;
          dragOffsetX = mouseX - ship.x;
          dragOffsetY = mouseY - ship.y;
          ships[index].dragging = true;
        }
      });
    });

    window.addEventListener('mousemove', function(event) {
      if (dragging) {
        const rect = canvas.getBoundingClientRect();
        const mouseX = event.clientX - rect.left - dragOffsetX;
        const mouseY = event.clientY - rect.top - dragOffsetY;
        
        ships.forEach((ship, index) => {
          if (ship.dragging) {
            ships[index].x = mouseX;
            ships[index].y = mouseY;
          }
        });

        drawGame();
      }
    });

    window.addEventListener('mouseup', function() {
      if (dragging) {
        dragging = false;
        ships.forEach((ship, index) => {
          if (ship.dragging) {
            let droppedX = Math.round(ship.x / spotSize) * spotSize;
            let droppedY = Math.round(ship.y / spotSize) * spotSize;
            if (index == 0) {
              if (droppedX < 0) {
                droppedX = 0;
              } else if (droppedX > 270) {
                droppedX = 270;
              }
              if (droppedY < 0) {
                droppedY = 0;
              } else if (droppedY > 270) {
                droppedY = 270;
              }
            } else if (index == 1) {
              if (droppedX < 0) {
                droppedX = 0;
              } else if (droppedX > 270) {
                droppedX = 270;
              }
              if (droppedY < 0) {
                droppedY = 0;
              } else if (droppedY > 240) {
                droppedY = 240;
              }
            } else {
              if (droppedX < 0) {
                droppedX = 0;
              } else if (droppedX > 270) {
                droppedX = 270;
              }
              if (droppedY < 0) {
                droppedY = 0;
              } else if (droppedY > 210) {
                droppedY = 210;
              }
            }
            let overlap = ships.some((otherShip, otherIndex) => {
              if (index !== otherIndex) {
                return !(droppedX + ship.width <= otherShip.x || 
                         droppedX >= otherShip.x + otherShip.width ||
                         droppedY + ship.height <= otherShip.y || 
                         droppedY >= otherShip.y + otherShip.height);
              }
              return false;
            });

            if (!overlap) {
              ship.x = droppedX;
              ship.y = droppedY;
              ship.placed = true;
              ship.dragging = false;
            } else {
              ship.x = ship.ogX;
              ship.y = ship.ogY;
              ship.dragging = false;
            }
          }
        });
        drawGame();
      }
    });
    
    function computerTurn() {
      if (gameOver) return;
      let hitMade = false;
      while (!hitMade) {
        let x = Math.floor(Math.random() * gridSize);
        let y = Math.floor(Math.random() * gridSize);
        if (!enemyHits.some(hit => hit[0] === x && hit[1] === y)) {
          let isHit = ships.some(ship => {
            let hitOnShip = x >= ship.x / spotSize && x < (ship.x + ship.width) / spotSize &&
                            y >= ship.y / spotSize && y < (ship.y + ship.height) / spotSize;
            if (hitOnShip) {
              ship.timesHit += 1;
            }
            return hitOnShip;
          });
          enemyHits.push([x, y]);
          if (isHit) {
            ctxGrid1.fillStyle = 'orange';
            ctxGrid1.fillRect(x * spotSize, y * spotSize, spotSize, spotSize);
            computerHitCount += 1;
          } else {
            ctxGrid1.fillStyle = 'green';
            ctxGrid1.fillRect(x * spotSize, y * spotSize, spotSize, spotSize);
            computerMissCount += 1;
          }
          
		  ships.forEach(ship => {
            if (ship.size <= ship.timesHit) {
              ctxGrid1.fillStyle = 'red';
              ctxGrid1.fillRect(ship.x, ship.y, ship.width, ship.height);
            }
          });
          document.getElementById('computerRecord').textContent = `Computer - Hits: ${computerHitCount}, Misses: ${computerMissCount}`;

          hitMade = true;
        }
      }
      if (computerHitCount == 6) {
        gameOver = true;
        document.getElementById('winnerMessage').textContent = `Computer wins!`;
        document.getElementById('newGameButton').style.display = "block";
      }
      userTurn = true;
    }

    function handleCanvasClick(event) {
      if (gameOver) return;
      if (!userTurn) return;
      const rect = gridCanvas2.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;
      const gridX = Math.floor(x / spotSize);
      const gridY = Math.floor(y / spotSize);
	  if (ships.every(ship => ship.placed == true)) {
        if (!hits.some(hit => hit[0] === gridX && hit[1] === gridY)) {
          if (enemyShips.some(ship => ship[0] === gridX && ship[1] === gridY)) {
            ctxGrid2.fillStyle = 'orange';
            ctxGrid2.fillRect(gridX * spotSize, gridY * spotSize, spotSize, spotSize);
            hits.push([gridX, gridY]);
            userHitCount += 1;
          } else {
            ctxGrid2.fillStyle = 'blue';
            ctxGrid2.fillRect(gridX * spotSize, gridY * spotSize, spotSize, spotSize);
            hits.push([gridX, gridY]);
            userMissCount += 1;
          }
          if (hits.some(hit => hit[0] === 5 && hit[1] === 5)) {
            if (hits.some(hit => hit[0] === 5 && hit[1] === 6)) {
              if (hits.some(hit => hit[0] === 5 && hit[1] === 7)) {
                ctxGrid2.fillStyle = 'red';
                ctxGrid2.fillRect(150, 150, spotSize, 3 * spotSize);
              }
            }
          }
          if (hits.some(hit => hit[0] === 1 && hit[1] === 1)) {
            if (hits.some(hit => hit[0] === 2 && hit[1] === 1)) {
              ctxGrid2.fillStyle = 'red';
              ctxGrid2.fillRect(30, 30, 2 * spotSize, spotSize);
            }
          }
          if (hits.some(hit => hit[0] === 3 && hit[1] === 7)) {
            ctxGrid2.fillStyle = 'red';
            ctxGrid2.fillRect(90, 210, spotSize, spotSize);
          }
          document.getElementById('userRecord').textContent = `Player 1 - Hits: ${userHitCount}, Misses: ${userMissCount}`;
          userTurn = false;
          if (userHitCount == 6) {
          	gameOver = true;
            document.getElementById('winnerMessage').textContent = `User wins!`;
            document.getElementById('newGameButton').style.display = "block";
          }
          computerTurn(); 
        } else {
          alert("spot was already bombed!");
        }
        
      }
    }
    function handleCanvasHover(event) {
      if (!gameOver) {
        const rect = gridCanvas2.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        const gridX = Math.floor(x / spotSize);
        const gridY = Math.floor(y / spotSize);

        const spotBombed = hits.some(hit => hit[0] === gridX && hit[1] === gridY);
        if (ships.every(ship => ship.placed == true)) {
          if(spotBombed) {
            document.getElementById('hoverMessage').textContent = `spot at (${gridX}, ${gridY}) was already bombed.`;
          } else {
            document.getElementById('hoverMessage').textContent = `Bomb placement valid`;
          }
        }
      } else {
        document.getElementById('hoverMessage').textContent = ``;
      }
    }
    
    function newGame() {
      userTurn = true;
      gameOver = false;
      userHitCount = 0;
      userMissCount = 0;
      computerHitCount = 0;
      computerMissCount = 0;
      hits = [];
      enemyHits = [];

      ships.forEach(ship => {
        ship.x = ship.ogX;
        ship.y = ship.ogY;
        ship.placed = false;
        ship.timesHit = 0;
      });

      document.getElementById('userRecord').textContent = "Player 1 - Hits: 0, Misses: 0";
      document.getElementById('computerRecord').textContent = "Computer - Hits: 0, Misses: 0";
      document.getElementById('winnerMessage').textContent = "";
      document.getElementById('hoverMessage').textContent = "Good Luck!";
      document.getElementById('newGameButton').style.display = "none";

      drawGame();
    }
    
    drawGame();
    gridCanvas2.addEventListener('click', handleCanvasClick);
    gridCanvas2.addEventListener('mousemove', handleCanvasHover);
    document.getElementById('newGameButton').addEventListener('click', newGame);
  });
</script>
</body>
</html>
